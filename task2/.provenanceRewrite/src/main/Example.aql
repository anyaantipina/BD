module main;


create view CountryTransportHeader as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    -1 as Document_____sep_____D____id,
    regex
      /Transportation (\w+( \w+)?)/
    with flags 
      'DOTALL'
    on D.text
    return
    group 1 as country

    and group 0 as transport

  from
    Document D;
output view CountryTransportHeader;

create view PreBlock as
  select
    Op.text as text,
    AutoID() as __auto__id
  from
    __Base__main__PreBlock__Temp Op;
output view PreBlock;

create view TransportationBlock as
  select
    CTH.country as country,
    PB.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    CTH.__auto__id as CountryTransportHeader_____sep_____CTH____id,
    PB.__auto__id as PreBlock_____sep_____PB____id
  from
    CountryTransportHeader CTH,
    PreBlock PB
  where
    Contains(
      PB.text,
      CTH.transport
    );
output view TransportationBlock;

create view Paragraph as
  select
    Op.text as text,
    AutoID() as __auto__id
  from
    __Base__main__Paragraph__Temp Op;
output view Paragraph;

create view RailwaysParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Railways:/,
      P.text
    );
output view RailwaysParagraph;

create view HighwaysParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Highways:/,
      P.text
    );
output view HighwaysParagraph;

create view WaterwaysParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Waterways:/,
      P.text
    );
output view WaterwaysParagraph;

create view PipelinesParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Pipelines:/,
      P.text
    );
output view PipelinesParagraph;

create view PortsAndHarborsParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Ports and harbors:/,
      P.text
    );
output view PortsAndHarborsParagraph;

create view MerchantMarineParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Merchant marine:/,
      P.text
    );
output view MerchantMarineParagraph;

create view AirportsParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /(Airports: |Airports - )/,
      P.text
    );
output view AirportsParagraph;

create view HeliportsParagraph as
  select
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    P.__auto__id as Paragraph_____sep_____P____id
  from
    Paragraph P
  where
    ContainsRegex(
      /Heliports:/,
      P.text
    );
output view HeliportsParagraph;

create view CountryRailwaysParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as RailwaysParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    RailwaysParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryRailwaysParagraph;

create view CountryHighwaysParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as HighwaysParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    HighwaysParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryHighwaysParagraph;

create view CountryWaterwaysParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as WaterwaysParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    WaterwaysParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryWaterwaysParagraph;

create view CountryPipelinesParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as PipelinesParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    PipelinesParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryPipelinesParagraph;

create view CountryPortsAndHarborsParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as PortsAndHarborsParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    PortsAndHarborsParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryPortsAndHarborsParagraph;

create view CountryMerchantMarineParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as MerchantMarineParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    MerchantMarineParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryMerchantMarineParagraph;

create view CountryAirportsParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as AirportsParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    AirportsParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryAirportsParagraph;

create view CountryHeliportsParagraph as
  select
    TB.country as country,
    P.text as text,
    AutoID() as __auto__id,
    'STMT_TYPE_SELECT' as __stmt__type,
    TB.__auto__id as TransportationBlock_____sep_____TB____id,
    P.__auto__id as HeliportsParagraph_____sep_____P____id
  from
    TransportationBlock TB,
    HeliportsParagraph P
  where
    Contains(
      TB.text,
      P.text
    );
output view CountryHeliportsParagraph;



create view Railways as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryRailwaysParagraph_____sep_____P____id,
    regex
      /Railways: *(total: {1,})?((\d+(,|.)?\d*) *km) *([a-z ]+ gauge)?/
    with flags 
      'DOTALL'
    on P.text
    return
    group 2 as total_dist

    and group 5 as gauge

  from
    CountryRailwaysParagraph P;
output view Railways;

create view Highways as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryHighwaysParagraph_____sep_____P____id,
    regex
      /Highways: *(total: {1,})?((\d+((,|.)?\d*){1,2}) *km) *(paved: {1,}((((\d+((,|.)?\d*){1,2}) km)|NA))? *(\((\w| |\n|,)*\))?(note: *((public|private)( *|\n) *roads *- *(\d+(,|.)?\d*) km *(\((\w| |\n)*\))? *;? *)*)* *(unpaved: {1,}(((\d+(,|.)?\d*){1,2}) km)|NA))?/
    with flags 
      'DOTALL'
    on P.text
    return
    group 2 as total_dist

    and group 7 as paved_dist

    and group 26 as unpaved_dist

  from
    CountryHighwaysParagraph P;
output view Highways;

create view Waterways as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryWaterwaysParagraph_____sep_____P____id,
    regex
      /Waterways: *((\d+(,|.)?\d*) *km|none|NA)/
    with flags 
      'DOTALL'
    on P.text
    return
    group 1 as total_dist

  from
    CountryWaterwaysParagraph P;
output view Waterways;

create view Pipelines as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryPipelinesParagraph_____sep_____P____id,
    regex
      /Pipelines: *((.|\n)*)/
    with flags 
      'DOTALL'
    on P.text
    return
    group 1 as info

  from
    CountryPipelinesParagraph P;
output view Pipelines;

create view PortsAndHarbors as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryPortsAndHarborsParagraph_____sep_____P____id,
    regex
      /Ports and harbors: *(none|NA|((.|\n)*))/
    with flags 
      'DOTALL'
    on P.text
    return
    group 1 as names

  from
    CountryPortsAndHarborsParagraph P;
output view PortsAndHarbors;

create view MerchantMarine as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryMerchantMarineParagraph_____sep_____P____id,
    regex
      /Merchant marine: *(total: *)?(none|NA|(\d+(,|.)?\d*) *ships) *(ships by type: *(NA|((.|\n)*))|.|\n)*/
    with flags 
      'DOTALL'
    on P.text
    return
    group 2 as total_amount

    and group 6 as ships_by_type

  from
    CountryMerchantMarineParagraph P;
output view MerchantMarine;

create view Airports as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryAirportsParagraph_____sep_____P____id,
    regex
      /Airports: *(\d*)/
    with flags 
      'DOTALL'
    on P.text
    return
    group 1 as total_amount

  from
    CountryAirportsParagraph P;
output view Airports;

create view Heliports as
  extract
    AutoID() as __auto__id,
    'STMT_TYPE_EXTRACT_REGEX' as __stmt__type,
    P.__auto__id as CountryHeliportsParagraph_____sep_____P____id,
    regex
      /Heliports: *(\d*)/
    with flags 
      'DOTALL'
    on P.text
    return
    group 1 as total_amount

  from
    CountryHeliportsParagraph P;
output view Heliports;

create view Result as
  select
    Op.country as country,
    Op.railway_total_dist as railway_total_dist,
    Op.highway_total_dist as highway_total_dist,
    Op.watertway_total_dist as watertway_total_dist,
    Op.pipelines_info as pipelines_info,
    Op.port_and_harbors_names as port_and_harbors_names,
    Op.merchant_marine_total_amount as merchant_marine_total_amount,
    Op.airport_total_amount as airport_total_amount,
    Op.heliport_total_amount as heliport_total_amount,
    AutoID() as __auto__id
  from
    __Base__main__Result__Temp Op;
output view Result;







create view __Base__main__Paragraph__Temp as
  extract
    split using P.boundary
      retain right split point
    on P.text as text
  from
(     extract
      D.text as text,
      regex
        /(\n\s*\n)/
      with flags 
        'DOTALL'
      on D.text
      return
      group 0 as boundary

    from
      Document D ) P;
output view __Base__main__Paragraph__Temp;

create view __Base__main__PreBlock__Temp as
  extract
    split using C.separator
      retain right split point
    on C.text as text
  from
(     extract
      D.text as text,
      regex
        /("={1,})/
      with flags 
        'DOTALL'
      on D.text
      return
      group 0 as separator

    from
      Document D ) C;
output view __Base__main__PreBlock__Temp;

create view __Base__main__Result__Temp as
  extract
    pattern
(          <CTH.country>) 
<Token>{1,200} 
(          <R.total_dist>) 
<Token>{1,200} 
(          <H.total_dist>) 
<Token>{1,200} 
(          <W.total_dist>) 
<Token>{1,200} 
(          <P.info>) 
<Token>{1,200} 
(          <PAH.names>) 
<Token>{1,200} 
(          <MM.total_amount>) 
<Token>{1,200} 
(          <A.total_amount>) 
<Token>{1,200} 
(          <HP.total_amount>)
    return
      group 1 as "country" and 
      group 2 as "railway_total_dist" and 
      group 3 as "highway_total_dist" and 
      group 4 as "watertway_total_dist" and 
      group 5 as "pipelines_info" and 
      group 6 as "port_and_harbors_names" and 
      group 7 as "merchant_marine_total_amount" and 
      group 8 as "airport_total_amount" and 
      group 9 as "heliport_total_amount"
  from
    CountryTransportHeader CTH,
    Railways R,
    Highways H,
    Waterways W,
    Pipelines P,
    PortsAndHarbors PAH,
    MerchantMarine MM,
    Airports A,
    Heliports HP;
output view __Base__main__Result__Temp;

